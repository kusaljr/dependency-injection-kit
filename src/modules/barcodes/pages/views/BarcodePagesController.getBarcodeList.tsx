/**
 * Auto-generated by @React() for route: /dashboard/barcodes/
 */

import {
  Breadcrumb,
  Button,
  Form,
  Input,
  InputNumber,
  Layout,
  Modal,
  Popconfirm,
  Select,
  Switch,
  Table,
  Tag,
  Typography,
} from "antd";
import TextArea from "antd/es/input/TextArea";
import { ColumnsType } from "antd/es/table";
import { useState } from "react";

const { Header, Content, Footer } = Layout;
const { Title } = Typography;

interface BarcodeMetadataType {
  hash: string;
  nonce: string;
}

interface BarcodeMetadata {
  type: BarcodeMetadataType;
  calories: number;
  code_type: string;
  description: string;
  ingredients: string[];
  non_vegetarian: boolean;
}

interface Barcode {
  id: number;
  code: string;
  is_active: boolean;
  metadata: BarcodeMetadata;
  created_at: string;
  updated_at: string | null;
}

function CreateBarcodeModal({
  onSubmit,
  initialValues,
  mode = "create",
}: {
  onSubmit: (data: any) => void;
  initialValues?: Partial<Barcode>;
  mode?: "create" | "edit";
}) {
  const [visible, setVisible] = useState(false);
  const [form] = Form.useForm();

  const handleOk = () => {
    form
      .validateFields()
      .then((values) => {
        onSubmit(values);
        form.resetFields();
        setVisible(false);
      })
      .catch((info) => console.log("Validation Failed:", info));
  };

  const openModal = () => {
    setVisible(true);
    if (initialValues) {
      form.setFieldsValue(initialValues);
    }
  };

  return (
    <>
      <Button
        type={mode === "create" ? "primary" : "default"}
        onClick={openModal}
      >
        {mode === "create" ? "Create Barcode" : "Edit"}
      </Button>

      <Modal
        title={mode === "create" ? "Create Barcode" : "Edit Barcode"}
        open={visible}
        onOk={handleOk}
        onCancel={() => setVisible(false)}
        okText={mode === "create" ? "Create" : "Save"}
      >
        <Form form={form} layout="vertical" className="grid grid-cols-2 gap-4">
          <Form.Item label="Code" name="code" rules={[{ required: true }]}>
            <Input />
          </Form.Item>

          <Form.Item label="Is Active" name="is_active" valuePropName="checked">
            <Switch />
          </Form.Item>

          <div className="col-span-2">
            <Title level={4}>Metadata</Title>
          </div>

          <Form.Item
            label="Nonce"
            name={["metadata", "type", "nonce"]}
            rules={[{ required: true }]}
          >
            <Input />
          </Form.Item>

          <Form.Item
            label="Hash"
            name={["metadata", "type", "hash"]}
            rules={[{ required: true }]}
          >
            <Input />
          </Form.Item>

          <Form.Item
            label="Ingredients"
            name={["metadata", "ingredients"]}
            rules={[{ required: true, type: "array", min: 1, max: 10 }]}
          >
            <Select mode="tags" placeholder="Enter ingredients" />
          </Form.Item>

          <Form.Item
            label="Calories"
            name={["metadata", "calories"]}
            rules={[{ required: true }]}
          >
            <InputNumber min={0} style={{ width: "100%" }} />
          </Form.Item>

          <Form.Item
            label="Code Type"
            name={["metadata", "code_type"]}
            rules={[{ required: true }]}
          >
            <Input />
          </Form.Item>

          <Form.Item
            label="Description"
            name={["metadata", "description"]}
            rules={[{ required: true }]}
          >
            <TextArea rows={3} />
          </Form.Item>

          <Form.Item
            label="Non-Vegetarian"
            name={["metadata", "non_vegetarian"]}
            valuePropName="checked"
            rules={[{ required: true }]}
          >
            <Switch />
          </Form.Item>
        </Form>
      </Modal>
    </>
  );
}

export default function BarcodePagesController_getBarcodeList({
  props,
}: {
  props: {
    data: {
      barcodes: Barcode[];
    };
  };
}) {
  const [barcodes, setBarcodes] = useState<Barcode[]>(props.data.barcodes);

  const handleCreate = (data: any) => {
    const newBarcode: Barcode = {
      ...data,
      id: Date.now(),
      metadata: {
        ...data.metadata,
        type: {
          ...data.metadata.type,
        },
      },
      created_at: new Date().toISOString(),
      updated_at: null,
    };
    setBarcodes([...barcodes, newBarcode]);
  };

  const handleEdit = (id: number, updatedData: any) => {
    setBarcodes((prev) =>
      prev.map((barcode) =>
        barcode.id === id
          ? {
              ...barcode,
              ...updatedData,
              updated_at: new Date().toISOString(),
            }
          : barcode
      )
    );
  };

  const confirmDelete = (id: number) => {
    Modal.confirm({
      title: "Are you sure you want to delete this barcode?",
      okText: "Yes",
      okButtonProps: { danger: true },
      cancelText: "No",
      onOk: () => {
        setBarcodes((prev) => prev.filter((b) => b.id !== id));
      },
    });
  };

  const columns: ColumnsType<Barcode> = [
    {
      title: "Code",
      dataIndex: "code",
      key: "code",
    },
    {
      title: "Active",
      dataIndex: "is_active",
      key: "is_active",
      render: (value) => (
        <Tag color={value ? "green" : "red"}>{value ? "Yes" : "No"}</Tag>
      ),
    },
    {
      title: "Calories",
      dataIndex: ["metadata", "calories"],
      key: "calories",
    },
    {
      title: "Code Type",
      dataIndex: ["metadata", "code_type"],
      key: "code_type",
    },
    {
      title: "Non-Vegetarian",
      dataIndex: ["metadata", "non_vegetarian"],
      key: "non_vegetarian",
      render: (value) => (value ? "Yes" : "No"),
    },
    {
      title: "Ingredients",
      dataIndex: ["metadata", "ingredients"],
      key: "ingredients",
      render: (ingredients) => ingredients.join(", "),
    },
    {
      title: "Created At",
      dataIndex: "created_at",
      key: "created_at",
      render: (date) => new Date(date).toLocaleString(),
    },
    {
      title: "Actions",
      key: "actions",
      render: (_, record) => (
        <div className="flex gap-2">
          <CreateBarcodeModal
            mode="edit"
            initialValues={record}
            onSubmit={(data) => handleEdit(record.id, data)}
          />
          <Popconfirm
            title="Are you sure you want to delete this barcode?"
            onConfirm={() => confirmDelete(record.id)}
            okText="Yes"
            cancelText="No"
          >
            <Button danger>Delete</Button>
          </Popconfirm>
        </div>
      ),
    },
  ];

  return (
    <Layout>
      <Header style={{ color: "#fff", fontSize: "20px" }}>
        <div className="logo" style={{ color: "#fff", fontSize: "24px" }}>
          Barcode Dashboard
        </div>
      </Header>

      <Content style={{ padding: "20px 50px" }}>
        <Breadcrumb style={{ margin: "16px 0" }}>
          <Breadcrumb.Item>Home</Breadcrumb.Item>
          <Breadcrumb.Item>Dashboard</Breadcrumb.Item>
        </Breadcrumb>

        <div className="flex justify-between items-center mb-4">
          <Title level={2}>Barcode Table</Title>

          <CreateBarcodeModal onSubmit={handleCreate} mode="create" />
        </div>

        <Table
          columns={columns}
          dataSource={barcodes.map((item) => ({ ...item, key: item.id }))}
        />
      </Content>

      <Footer style={{ textAlign: "center" }}>DiKit Â©2025</Footer>
    </Layout>
  );
}
